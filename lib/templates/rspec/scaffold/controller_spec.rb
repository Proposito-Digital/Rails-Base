require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

<% module_namespacing do -%>
RSpec.describe Admin::<%= controller_class_name %>Controller, type: :controller  do

  let(:valid_attributes) {
    attributes_for(:<%= file_name %>)
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
    # {name: ""}
  }

  let(:user){ create(:user) }

  let(:<%= file_name %>){ create(:<%= file_name %>) }

  before(:each) do      
    sign_in user
  end 

<% unless options[:singleton] -%>
  describe "GET #index" do
    it "assigns all <%= table_name.pluralize %> as @instances" do
      get :index, params: {}
      expect(response).to be_successful
    end
  end

<% end -%>
  describe "GET #show" do
    it "assigns the requested <%= table_name %> as @instance" do
      get :show, params: {:id => <%= file_name %>.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "assigns a new <%= table_name %> as @instance" do
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "assigns the requested <%= table_name %> as @instance" do
      get :edit, params: {:id => <%= file_name %>.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new <%= class_name %>" do
        expect {
          post :create, params: {:<%= file_name %> => valid_attributes}
        }.to change(<%= class_name %>, :count).by(1)
      end

      it "redirects to the list of entities" do
        post :create, params: {:<%= file_name %> => valid_attributes}
        expect(response).to redirect_to(admin_<%= table_name.pluralize %>_url)
      end
    end

    context "with invalid params" do

      it "re-renders the 'new' template" do
        post :create, params: {:<%= file_name %> => invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
        # { name: "john"}
      }

      it "updates the requested <%= file_name %>" do
        put :update, params: {:id => <%= file_name %>.to_param, :<%= file_name %> => new_attributes}
        <%= file_name %>.reload
        skip("Add assertions for updated state")
        # expect(<%= file_name %>.name).to eq "john" 
      end

      it "redirects to the <%= file_name %>" do
        put :update, params: {:id => <%= file_name %>.to_param, :<%= file_name %> => valid_attributes}
        expect(response).to redirect_to(admin_<%= file_name %>_path(<%= file_name %>))
      end
    end

    context "with invalid params" do

      it "returns a success response (i.e. to display the 'edit' template)" do
        put :update, params: {:id => <%= file_name %>.to_param, :<%= file_name %> => invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested <%= table_name %>" do
      <%= file_name %> = create(:<%= file_name %>)
      expect {
        delete :destroy, params: {:id => <%= file_name %>.to_param}
      }.to change(<%= class_name %>, :count).by(-1)
    end

    it "redirects to the <%= table_name %> list" do
      delete :destroy, params: {:id => <%= file_name %>.to_param}
      expect(response).to redirect_to(admin_<%= index_helper %>_url)
    end
  end

end
<% end -%>